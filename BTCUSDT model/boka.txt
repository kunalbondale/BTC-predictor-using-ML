import os
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error
from bokeh.plotting import figure, show
from bokeh.palettes import Turbo256  # Option for customizable color palettes

# Set directory path
directory_path = r"C:\Users\Smit Joshi\Music\BTCUSDT model"

# Set file names in the correct order
file_names = [
    'btc_1h.csv', 'btc_2h.csv', 'btc_3m.csv', 'btc_4h.csv',
    'btc_5m.csv', 'btc_6h.csv', 'btc_15m.csv', 'btc_30m.csv'
]

# Function to load and concatenate data
def load_and_concatenate(file_paths):
    data_frames = [pd.read_csv(file_path) for file_path in file_paths]
    return pd.concat(data_frames, ignore_index=True)

# Load and concatenate the data
file_paths = [os.path.join(directory_path, file_name) for file_name in file_names]
df = load_and_concatenate(file_paths)

# Assuming 'close' is your target variable
X = df[['open', 'high', 'low', 'volume']]  # Replace with your actual feature columns
y = df['close']  # Replace 'close' with your actual target column

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train a linear regression model
model = LinearRegression()
model.fit(X_train, y_train)

# Make predictions on the test set
y_pred = model.predict(X_test)

# Calculate Mean Squared Error
mse = mean_squared_error(y_test, y_pred)

# Create a Bokeh figure
p = figure(title="Actual vs Predicted", x_axis_label="Actual", y_axis_label="Predicted")

# Scatter plot of actual vs predicted values
p.scatter(x=y_test, y=y_pred, size=8, color=Turbo256[0], alpha=0.7)

# Add a line of equality for reference
p.line([min(y_test), max(y_test)], [min(y_test), max(y_test)], line_dash="dashed", line_width=2, color="red")

# Add interactive features
p.x_range.start = min(y_test) - 0.1 * min(y_test)
p.x_range.end = max(y_test) + 0.1 * max(y_test)
p.y_range.start = min(y_pred) - 0.1 * min(y_pred)
p.y_range.end = max(y_pred) + 0.1 * max(y_pred)

# Crucial for displaying the plot:
show(p)  # Display the interactive Bokeh plot



# optimized boka 

# An optimized version of the bokeh plot 

import os
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error
from bokeh.plotting import figure, show
from bokeh.palettes import Turbo256

# Set directory path
directory_path = r"C:\Users\Smit Joshi\Music\BTCUSDT model"

# Set file names in the correct order
file_names = [
    'btc_1h.csv', 'btc_2h.csv', 'btc_3m.csv', 'btc_4h.csv',
    'btc_5m.csv', 'btc_6h.csv', 'btc_15m.csv', 'btc_30m.csv'
]

# Function to load and concatenate data
def load_and_concatenate(file_paths):
    data_frames = [pd.read_csv(file_path) for file_path in file_paths]
    return pd.concat(data_frames, ignore_index=True)

# Load and concatenate the data
file_paths = [os.path.join(directory_path, file_name) for file_name in file_names]
df = load_and_concatenate(file_paths)

# Assuming 'close' is your target variable
X = df[['open', 'high', 'low', 'volume']]  # Replace with your actual feature columns
y = df['close']  # Replace 'close' with your actual target column

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train a linear regression model
model = LinearRegression()
model.fit(X_train, y_train)

# Make predictions on the test set
y_pred = model.predict(X_test)

# Calculate Mean Squared Error
mse = mean_squared_error(y_test, y_pred)

# Create a Bokeh figure with reduced data points
p = figure(title="Actual vs Predicted", x_axis_label="Actual", y_axis_label="Predicted")

# Scatter plot of actual vs predicted values with reduced data points
sample_size = 500  # Adjust the sample size as needed
p.scatter(x=y_test[:sample_size], y=y_pred[:sample_size], size=8, color=Turbo256[0], alpha=0.7)

# Add a line of equality for reference
p.line([min(y_test), max(y_test)], [min(y_test), max(y_test)], line_dash="dashed", line_width=2, color="red")

# Add interactive features
p.x_range.start = min(y_test) - 0.1 * min(y_test)
p.x_range.end = max(y_test) + 0.1 * max(y_test)
p.y_range.start = min(y_pred) - 0.1 * min(y_pred)
p.y_range.end = max(y_pred) + 0.1 * max(y_pred)

# Crucial for displaying the plot:
show(p)  # Display the interactive Bokeh plot